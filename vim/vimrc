" .vimrc

" !silent is used to suppress error messages if the config line
" references plugins/colorschemes that might be missing

" Disable Vi compatibility
set nocompatible

" Load all Vim-Plug modules
call plug#begin('~/.vim/plugged')
Plug 'mileszs/ack.vim'
Plug 'kien/ctrlp.vim'
Plug 'tpope/vim-fugitive'
Plug 'mattn/webapi-vim' | Plug 'mattn/gist-vim'
Plug 'walm/jshint.vim'
Plug 'elzr/vim-json'
Plug 'scrooloose/nerdcommenter'
Plug 'bling/vim-airline'
Plug 'tpope/vim-repeat'
Plug 'altercation/vim-colors-solarized'
Plug 'tpope/vim-surround'
Plug 'scrooloose/syntastic'
Plug 'rizzatti/dash.vim'
Plug 'easymotion/vim-easymotion'
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'ervandew/supertab'
Plug 'pangloss/vim-javascript' | Plug 'mxw/vim-jsx'
call plug#end()

if has("autocmd")
    " Load files for specific filetypes
    filetype on
    filetype indent on
    filetype plugin on
endif

" Color Scheme {{{
" }}}
if has("syntax")
    " Enable syntax highlighting
    syntax enable
    " Set 16 color terminal support
    let g:solarized_termcolors = 16
    " Set colorscheme
    silent! colorscheme solarized
    if $ITERM_PROFILE == 'light'
        set bg=light
    else
        set bg=dark
    endif
endif

if has("cmdline_info")
    " Show the cursor line and column number
    set ruler
    " Show partial commands in status line
    set showcmd
    " Show whether in insert or replace mode
    set showmode
endif


if has('statusline')
    let g:airline_powerline_fonts=1
    set ttimeoutlen=50
    set timeoutlen=1000
    " Always show status line
    set laststatus=2
    " Broken down into easily includeable segments
    " Filename
"    set statusline=%F%m%r%h%w
    " Syntastic warning messages
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*
    " Filetypes
"    set statusline+=%=(%{&ff}/%Y)
    " Right aligned file nav info
"    set statusline+=\ (line\ %l\/%L,\ col\ %c)
    " Set powerline symbols
"    let g:Powerline_symbols = 'fancy'
endif

if has("wildmenu")
    " Show a list of possible completions
    set wildmenu
    " Tab autocomplete longest possible part of a string, then list
    set wildmode=longest,list
    if has ("wildignore")
        set wildignore+=.hg,.git,.svn
        set wildignore+=*.a,*.o,*.obj,*.exe,*.dll,*.pyc
        set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png
        set wildignore+=.DS_Store,.git,.hg,.svn
        set wildignore+=*~,*.swp,*.tmp
    endif
endif

if has("extra_search")
    " Highlight searches [use :noh to clear]
    set hlsearch
    " Highlight dynamically as pattern is typed
    set incsearch
    " Ignore case of searches...
    set ignorecase
    " ...unless has mixed case
    set smartcase
    " Default to very magic pattern switch
    nnoremap / /\v
    vnoremap / /\v
    " Default to global replace
    set gdefault
    " Show match while typing
    set showmatch
endif

" Backspace through everything in INSERT mode
set backspace=indent,eol,start
" Optimize for fast terminal connections
set ttyfast
" Use UTF-8 without BOM
set encoding=utf-8 nobomb

" Use 4 spaces for indentation
set shiftwidth=4
" Use 4 spaces for soft tab
set softtabstop=4
" Use 4 spaces for tab
set tabstop=4
" Expand tab to spaces
set expandtab
" Enable relative line numbers
set relativenumber
" Enable the current line number to not be relative
set number
" Highlight current line
set cursorline
" Start scrolling three lines before the horizontal window border
set scrolloff=3
" Don’t reset cursor to start of line when moving around.
set nostartofline

" Show 'invisible' characters
set list
" Set characters used to indicate 'invisible' characters
set listchars=tab:▸\
set listchars+=eol:¬
"Invisible character colors
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=#4a4a59
" Set the Cursor Shape
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Centralize backups, swapfiles and undo history
set backupdir=~/.vim/tmp/backup
set directory=~/.vim/tmp/swap
if exists("&undodir")
    set undodir=~/.vim/tmp/undo
endif

set autoindent
set hidden
set visualbell
set undofile
set spelllang=en_us

" Whitespace stuff
set wrap
set textwidth=85
set formatoptions=qrn1

" Custom leader button
let mapleader = ","
" Shortcut to clear highlighted matches
nnoremap <Leader><Space> :noh<cr>
" strip all trailing whitespace in the current file
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>
" ack shortcut
nnoremap <Leader>a :Ack
" html fold tag
nnoremap <leader>ft Vatzf
" sort css propperties
nnoremap <leader>S ?{<CR>jV/^\s*\}?$<CR>k:sort<CR>:noh<CR>
" reselect text that was just pasted
nnoremap <leader>v V`]
" open .vimrc file in vertical split
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>
" spell check
noremap <leader>s :set spell!<CR>
" Can't be bothered to understand ESC vs <c-c> in insert mode
imap <c-c> <esc>
" Move around splits with <c-hjkl>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="

"
" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'
" }}}

" Syntastic settings {{{
let g:syntastic_auto_loc_list = 2
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_mode_map = { 'mode': 'passive',
                           \ 'active_filetypes': ['python', 'django', 'javascript', 'css', 'go'],
                           \ 'passive_filetypes': ['htmldjango'] }
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_python_flake8_args = '--ignore="E231,E501,E127,E128,W601"'
let g:syntastic_javascript_checkers = ['jshint', 'jsxhint',]
let g:syntastic_json_checkers = ['jsonlint']
" }}}

" CtrlP settings {{{
let g:ctrlp_working_path_mode = 2
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_show_hidden = 1
let g:ctrlp_cache_dir = $HOME.'/.vim/tmp/.cache/ctrlp'
let g:ctrlp_custom_ignore = { 'dir': '.*/CACHE/.*' }
" }}}

" Ack settings {{{
let g:ackprg="ack-grep -H --nocolor --nogroup --column --ignore-dir=**/CACHE"
" }}}

" Gist settings {{{
let g:gist_post_private = 1
" }}}

" Pydoc settings {{{
let g:pydoc_cmd = '/usr/bin/env python -m pydoc'
" }}}

" CTags {{{
map <Leader>rt :!ctags --extra=+f -R *<CR><CR>
map <F8> :!/usr/bin/env ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
"}}}

" Django {{{
au BufNewFile,BufRead admin.py     setlocal filetype=python.django
au BufNewFile,BufRead urls.py      setlocal filetype=python.django
au BufNewFile,BufRead models.py    setlocal filetype=python.django
au BufNewFile,BufRead views.py     setlocal filetype=python.django
au BufNewFile,BufRead forms.py     setlocal filetype=python.django
" }}}

" HTML and HTMLDjango {{{
au BufNewFile,BufRead *.html setlocal filetype=htmldjango.html
au FileType html,jinja,htmldjango setlocal foldmethod=manual

" Use <leader>f to fold the current tag.
au FileType html,jinja,htmldjango nnoremap <buffer> <leader>f Vatzf
"" }}}

" Remember last location in file
if has("autocmd")
    au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
        \| exe "normal g'\"" | endif
    filetype on

    " Syntax of these languages is fussy over tabs Vs spaces
    autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
    autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

    " The following line sets the smartindent mode for *.py files.
    " It means that after typing lines which start with any of the
    " keywords in the list (ie. def, class, if, etc) the next line
    " will automatically indent itself to the next level of indentation:
    autocmd BufRead *.py set nosmartindent cinwords=if,elif,else,for,while,try,except,finally,def,class

    " Many people like to remove any extra whitespace from the
    " ends of lines. Here is one way to do it when saving your file.
    autocmd BufWritePre *.py normal m`:%s/\s\+$//e``
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 function! RenameFile()
     let old_name = expand('%')
     let new_name = input('New file name: ', expand('%'), 'file')
     if new_name != '' && new_name != old_name
         exec ':saveas ' . new_name
         exec ':silent !rm ' . old_name
         redraw!
     endif
 endfunction
 map <leader>n :call RenameFile()<cr>

 nnoremap <F2> :set invpaste paste?<CR>
 set pastetoggle=<F2>

" Source a local configuration file if available.
if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
endif

" Markdown preview
imap <leader>p <ESC>:w!<CR>:!markdown % > %.html && open %.html<CR>
map <leader>p <ESC>:w!<CR>:!markdown % > %.html && open %.html<CR>
