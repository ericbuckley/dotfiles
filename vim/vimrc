" .vimrc

" Load all Vim-Plug modules
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-sensible'

" visuals
Plug 'altercation/vim-colors-solarized'
Plug 'morhetz/gruvbox'
Plug 'itchyny/lightline.vim'
Plug 'shinchu/lightline-gruvbox.vim'
Plug 'maximbaz/lightline-ale'

" navigating
Plug 'liuchengxu/vim-clap'
Plug 'christoomey/vim-tmux-navigator'

" editing
if has('nvim')
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
endif
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'scrooloose/nerdcommenter'
Plug 'roxma/vim-paste-easy'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-eunuch'

" building
Plug 'w0rp/ale'
Plug 'tpope/vim-dispatch'

" github
Plug 'tpope/vim-fugitive'
Plug 'mattn/webapi-vim' | Plug 'mattn/gist-vim'
call plug#end()

" editing defaults
set nowrap " stop word wrapping
autocmd FileType markdown setlocal wrap " except on markdown
set clipboard=unnamed " use system clipboard
set number relativenumber " enable number gutter with relative line numbers
set list listchars=tab:▸\ ,eol:¬ " set 'invisible' characters
set spell spelllang=en_us " enable spell check
let mapleader="\<SPACE>" " leader key

" tab widths
set tabstop=4 softtabstop=4 shiftwidth=4 expandtab " default is 4
autocmd FileType javascript*,json,yaml setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType make setlocal ts=4 sts=4 sw=4 noexpandtab

" shortcuts
" return to last opened file
nmap <Leader><Leader> <c-^>
" tab to next buffer
nnoremap <Tab> :bnext!<CR>
" shift tab to previous buffer
nnoremap <S-Tab> :bprev!<CR>
nnoremap <Leader>ev :e ~/.vim/vimrc<CR>
nnoremap <Leader>sv :source ~/.vim/vimrc<CR>
nnoremap <Leader>env :e $MYVIMRC<CR>
nnoremap <Leader>snv :source $MYVIMRC<CR>
" remove highlighting
nnoremap <Leader>nh :noh<CR>

" centralize backups, swapfiles and undo history
set backupdir=~/.vim/tmp/backup
set directory=~/.vim/tmp/swap
if exists("&undodir")
    set undodir=~/.vim/tmp/undo
endif

" ignore some files and directores
if has("wildmenu")
    set wildmode=longest,list
    if has ("wildignore")
        set wildignore+=.hg,.git,.svn
        set wildignore+=*.a,*.o,*.obj,*.exe,*.dll,*.pyc
        set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png
        set wildignore+=.DS_Store,.git,.hg,.svn
        set wildignore+=*~,*.swp,*.tmp
    endif
endif

" colorscheme
colorscheme gruvbox
set background=dark
if $ITERM_PROFILE =~ '*light' | set background=light | endif
if has('nvim') | set termguicolors | endif

" vim-lightline
let g:lightline = {}
let g:lightline.colorscheme = 'gruvbox'
let g:lightline.component_expand = {
  \  'linter_checking': 'lightline#ale#checking',
  \  'linter_infos': 'lightline#ale#infos',
  \  'linter_warnings': 'lightline#ale#warnings',
  \  'linter_errors': 'lightline#ale#errors',
  \  'linter_ok': 'lightline#ale#ok',
  \ }
let g:lightline.component_type = {
  \  'linter_checking': 'right',
  \  'linter_infos': 'right',
  \  'linter_warnings': 'warning',
  \  'linter_errors': 'error',
  \  'linter_ok': 'right',
  \ }
let g:lightline.active = { 
  \  'left': [
    \  ['mode', 'paste'],
    \  ['readonly', 'relativepath', 'modified']
    \ ],
  \  'right': [
    \  [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_infos', 'linter_ok' ],
    \  [ ],
    \  [ 'lineinfo', 'filetype', ],
    \ ]
  \ }
let g:lightline.inactive = { 
  \  'left': [[ 'relativepath', ]],
  \  'right': [[ 'percent', ]],
  \ }

" clap
nnoremap <c-p> :Clap files ++finder=rg --files --no-ignore-vcs<CR>
nnoremap <Leader>fp :Clap grep<CR>
nnoremap <Leader>ff :Clap files ++finder=rg --files $HOME<CR>
nnoremap <Leader>fd :Clap files ++finder=rg --files --hidden $HOME<CR>
let g:clap_open_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }

" deoplete
let g:deoplete#enable_at_startup = 1
" tab complete
"inoremap <expr><tab> pumvisible() ? "\<c-p>" : "\<tab>" "

" ultisnips
let g:UltiSnipsExpandTrigger="<C-j>"

" ale
let g:ale_completion_enabled = 0
let g:ale_lint_on_text_changed = 'never'
let g:ale_linters = {
    \ 'python': ['pylint', 'flake8'],
    \ 'javascript': ['eslint'],
    \ 'ruby': ['rubocop'],
    \ }
" map keys to use wrapping.
"nmap <silent> <C-p> <Plug>(ale_previous_wrap)
"nmap <silent> <C-n> <Plug>(ale_next_wrap)

" gist
let g:gist_post_private = 1
let g:gist_clip_command = 'pbcopy'

set exrc
set secure
