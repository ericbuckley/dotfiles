" .vimrc

" Load all Vim-Plug modules
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-sensible'

" visuals
Plug 'morhetz/gruvbox'
Plug 'itchyny/lightline.vim'
Plug 'shinchu/lightline-gruvbox.vim'
Plug 'maximbaz/lightline-ale'
Plug 'junegunn/limelight.vim'
Plug 'chrisbra/colorizer'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}

" navigating
Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary!' }
Plug 'christoomey/vim-tmux-navigator'

" editing
Plug 'scrooloose/nerdcommenter'
Plug 'roxma/vim-paste-easy'
Plug 'tpope/vim-surround'
Plug 'danro/rename.vim'
if has('nvim-0.5')
    Plug 'dcampos/nvim-snippy' | Plug 'honza/vim-snippets'
endif

" languages
if has('nvim-0.5')
    Plug 'neovim/nvim-lspconfig'
endif
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'hashivim/vim-terraform'

" building
Plug 'w0rp/ale'
Plug 'tpope/vim-dispatch'

" git/github
Plug 'tpope/vim-fugitive'
Plug 'mattn/webapi-vim' | Plug 'mattn/gist-vim'
call plug#end()

" editing defaults
set nowrap " stop word wrapping
autocmd FileType markdown setlocal wrap " except on markdown
set clipboard=unnamed " use system clipboard
set number relativenumber " enable number gutter with relative line numbers
set list listchars=tab:▸\ ,eol:¬ " set 'invisible' characters
set spell spelllang=en_us " enable spell check
let mapleader="\<SPACE>" " leader key

" tab widths
set tabstop=4 softtabstop=4 shiftwidth=4 expandtab " default is 4
autocmd FileType javascript*,json,yaml setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType make setlocal ts=4 sts=4 sw=4 noexpandtab

" shortcuts
" return to last opened file
nmap <Leader><Leader> <c-^>
" tab to next buffer
nnoremap <Tab> :bnext!<CR>
" shift tab to previous buffer
nnoremap <S-Tab> :bprev!<CR>
nnoremap <Leader>ev :e ~/.vim/vimrc<CR>
nnoremap <Leader>sv :source ~/.vim/vimrc<CR>
nnoremap <Leader>env :e $MYVIMRC<CR>
nnoremap <Leader>snv :source $MYVIMRC<CR>
" remove highlighting
nnoremap <Leader>nh :noh<CR>

" centralize backups, swapfiles and undo history
set backupdir=~/.vim/tmp/backup
set directory=~/.vim/tmp/swap
if exists("&undodir")
    set undodir=~/.vim/tmp/undo
endif

" ignore some files and directores
if has("wildmenu")
    set wildmode=longest,list
    if has ("wildignore")
        set wildignore+=.hg,.git,.svn
        set wildignore+=*.a,*.o,*.obj,*.exe,*.dll,*.pyc
        set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png
        set wildignore+=.DS_Store,.git,.hg,.svn
        set wildignore+=*~,*.swp,*.tmp
    endif
endif

" colorscheme
colorscheme gruvbox
"colorscheme Base2Tone_MeadowDark
set background=dark
if $ITERM_PROFILE =~ '*light' | set background=light | endif
if has('nvim')
    set termguicolors
    " https://github.com/neovim/neovim/wiki/FAQ
    set guicursor=n-v-c:block-Cursor/lCursor-blinkon0,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor
endif

" vim-lightline
let g:lightline = {}
let g:lightline.colorscheme = 'gruvbox'
let g:lightline.component_expand = {
  \  'linter_checking': 'lightline#ale#checking',
  \  'linter_infos': 'lightline#ale#infos',
  \  'linter_warnings': 'lightline#ale#warnings',
  \  'linter_errors': 'lightline#ale#errors',
  \  'linter_ok': 'lightline#ale#ok',
  \ }
let g:lightline.component_type = {
  \  'linter_checking': 'right',
  \  'linter_infos': 'right',
  \  'linter_warnings': 'warning',
  \  'linter_errors': 'error',
  \  'linter_ok': 'right',
  \ }
let g:lightline.active = { 
  \  'left': [
    \  ['mode', 'paste'],
    \  ['readonly', 'relativepath', 'modified']
    \ ],
  \  'right': [
    \  [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_infos', 'linter_ok' ],
    \  [ ],
    \  [ 'lineinfo', 'filetype', ],
    \ ]
  \ }
let g:lightline.inactive = { 
  \  'left': [[ 'relativepath', ]],
  \  'right': [[ 'percent', ]],
  \ }

" limelight
nmap <Leader>ll :Limelight!!<CR>
xmap <Leader>ll :Limelight!!<CR>

" clap
nnoremap <c-p> :Clap files<CR>
nnoremap <Leader>fp :Clap grep<CR>
nnoremap <Leader>ff :Clap files ++finder=rg --files $HOME<CR>
nnoremap <Leader>fd :Clap files ++finder=rg --files --hidden $HOME<CR>
let g:clap_preview_direction = 'UD'
let g:clap_open_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit',
  \ 'ctrl-x': 'vsplit' }

" grep
set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
set grepformat=%f:%l:%c:%m

" snippy
imap <expr> <Tab> snippy#can_expand_or_advance() ? '<Plug>(snippy-expand-or-advance)' : '<Tab>'
imap <expr> <S-Tab> snippy#can_jump(-1) ? '<Plug>(snippy-previous)' : '<S-Tab>'
smap <expr> <Tab> snippy#can_jump(1) ? '<Plug>(snippy-next)' : '<Tab>'
smap <expr> <S-Tab> snippy#can_jump(-1) ? '<Plug>(snippy-previous)' : '<S-Tab>'
xmap <Tab> <Plug>(snippy-cut-text)

" ale
let g:ale_completion_enabled = 0
let g:ale_lint_on_text_changed = 'never'
let g:ale_linters = {
    \ 'python': ['pylint', 'flake8'],
    \ 'javascript': ['eslint'],
    \ 'ruby': ['rubocop'],
    \ 'go': ['gopls'],
    \ 'java': ['javac'],
    \ }
let g:ale_fixers = {
    \ 'python': ['black']
    \ }
" map keys to use wrapping.
"nmap <silent> <C-p> <Plug>(ale_previous_wrap)
"nmap <silent> <C-n> <Plug>(ale_next_wrap)

" gist
let g:gist_post_private = 1
let g:gist_clip_command = 'pbcopy'

" vim-go
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'


" nvim-lspconfig
if has ('nvim-0.5')
    let g:LanguageClient_serverCommands = {
       \ 'go': ['gopls'],
       \ 'python': ['pylsp']
       \ }

lua << EOF
local nvim_lsp = require('lspconfig')

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  --Enable completion triggered by <c-x><c-o>
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  buf_set_keymap('n', '<leader><tab>', '<cmd>lua vim.lsp.buf.completion()<CR>', opts)
  buf_set_keymap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', 'gs', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)

end

-- Use a loop to conveniently call 'setup' on multiple servers and
-- map buffer local keybindings when the language server attaches
local servers = { 'pylsp', 'gopls' }
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup {
    on_attach = on_attach,
    flags = {
      debounce_text_changes = 150,
    }
  }
end
EOF

endif

" Open current GH file in browser using the ghcli
command GHBrowse silent! execute "!gh browse " . expand('%:h') . "/" . expand('%:t') . ":" . line('.')

set exrc
set secure
